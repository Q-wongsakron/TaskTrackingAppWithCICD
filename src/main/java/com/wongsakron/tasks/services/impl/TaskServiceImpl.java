package com.wongsakron.tasks.services.impl;


import com.wongsakron.tasks.domain.entities.Task;
import com.wongsakron.tasks.domain.entities.TaskList;
import com.wongsakron.tasks.domain.entities.TaskPriority;
import com.wongsakron.tasks.domain.entities.TaskStatus;
import com.wongsakron.tasks.repositories.TaskListRepository;
import com.wongsakron.tasks.repositories.TaskRepository;
import com.wongsakron.tasks.services.TaskService;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;

@Service
public class TaskServiceImpl implements TaskService {

    private final TaskRepository taskRepository; // Assuming a TaskRepository exists for data access
    private final TaskListRepository taskListRepository; // Assuming a TaskListRepository exists for data access

    public TaskServiceImpl(TaskRepository taskRepository, TaskListRepository taskListRepository) {
        this.taskRepository = taskRepository;
        this.taskListRepository = taskListRepository;
    }

    @Override
    public List<Task> listTasks(UUID taskListId) {
        return taskRepository.findByTaskListId(taskListId); // Retrieves all tasks for a specific task list
    }

    @Override
    public Task createTask(UUID taskListId, Task task) {


        if (task == null) {
            throw new IllegalArgumentException("Task payload cannot be null!");
        }
        if (task.getId() != null) {
            throw new IllegalArgumentException("Task already has an Id!");
        }

        if (task.getTitle() == null) {
            throw new IllegalArgumentException("Task title cannot be null!");
        }
        String title = task.getTitle().trim();
        if (title.isEmpty()) {
            throw new IllegalArgumentException("Task title cannot be blank!");
        }

        if (taskListId == null) {
            throw new IllegalArgumentException("Invalid Task List ID provided!");
        }

        TaskPriority taskPriority = Optional.ofNullable(task.getPriority())
                .orElse(TaskPriority.MEDIUM); // Sets a default priority if none is provided

        TaskStatus taskStatus = TaskStatus.OPEN;

        TaskList taskList = taskListRepository.findById(taskListId)
                .orElseThrow(() -> new IllegalArgumentException("Invalid Task List ID provided!")); // Validates that the task list exists

        LocalDateTime now = LocalDateTime.now();

       Task taskForSave = new Task(
                        null, // ID will be generated by the database
                        task.getTitle(),
                        task.getDescription(),
                        task.getDueDate(),
                        taskStatus,
                        taskPriority,
                        taskList,
                        now,
                        now
                ); // Creates a new task
        return taskRepository.save(taskForSave); // Saves the new task to the repository
    }

    @Override
    public Optional<Task> getTask(UUID taskListId, UUID taskId) {
        return taskRepository.findByTaskListIdAndId(taskListId, taskId); // Retrieves a specific task by its ID within a task list
    }

    @Override
    public Task updateTask(UUID taskListId, UUID taskId, Task task) {
        if(null == task.getId()) {
            throw new IllegalArgumentException("Task ID cannot be null!"); // Ensures that the task has a valid ID for updating
        }
        if(!Objects.equals(taskId,task.getId())){
            throw new IllegalArgumentException("Task ID does not match the provided ID!"); // Validates that the task ID matches the provided ID
        }

        if(null == task.getPriority()){
            throw new IllegalArgumentException("Task priority cannot be null!"); // Validates that the task has a non-null priority
        }

        if(null == task.getStatus()){
            throw new IllegalArgumentException("Task status cannot be null!"); // Validates that the task has a non-null status
        }

        Task existingTask = taskRepository.findByTaskListIdAndId(taskListId, taskId).orElseThrow(
                () -> new IllegalArgumentException("Task not found!") // Validates that the task exists in the specified task list
        );

        existingTask.setTitle(task.getTitle());
        existingTask.setDescription(task.getDescription());
        existingTask.setDueDate(task.getDueDate());
        existingTask.setPriority(task.getPriority());
        existingTask.setStatus(task.getStatus());
        existingTask.setUpdated(LocalDateTime.now()); // Updates the task's updated timestamp

        return taskRepository.save(existingTask); // Saves the updated task to the repository
    }

    @Override
    @Transactional
    public void deleteTask(UUID taskListId, UUID taskId) {
        taskRepository.deleteByTaskListIdAndId(taskListId, taskId);
    }
}
