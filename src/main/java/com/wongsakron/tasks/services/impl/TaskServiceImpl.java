package com.wongsakron.tasks.services.impl;


import com.wongsakron.tasks.domain.entities.Task;
import com.wongsakron.tasks.domain.entities.TaskList;
import com.wongsakron.tasks.domain.entities.TaskPriority;
import com.wongsakron.tasks.domain.entities.TaskStatus;
import com.wongsakron.tasks.repositories.TaskListRepository;
import com.wongsakron.tasks.repositories.TaskRepository;
import com.wongsakron.tasks.services.TaskService;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class TaskServiceImpl implements TaskService {

    private final TaskRepository taskRepository; // Assuming a TaskRepository exists for data access
    private final TaskListRepository taskListRepository; // Assuming a TaskListRepository exists for data access

    public TaskServiceImpl(TaskRepository taskRepository, TaskListRepository taskListRepository) {
        this.taskRepository = taskRepository;
        this.taskListRepository = taskListRepository;
    }

    @Override
    public List<Task> listTasks(UUID taskListId) {
        return taskRepository.findByTaskListId(taskListId); // Retrieves all tasks for a specific task list
    }

    @Override
    public Task createTask(UUID taskListId, Task task) {

        if(null != task.getId()) {
            throw new IllegalArgumentException("Task already has an Id!"); // Ensures that the task does not already have an ID, indicating it is a new task
        }

        if(null == task.getTitle()) {
            throw new IllegalArgumentException("Task title cannot be null!"); // Validates that the task has a non-null title
        }

        TaskPriority taskPriority = Optional.ofNullable(task.getPriority())
                .orElse(TaskPriority.MEDIUM); // Sets a default priority if none is provided

        TaskStatus taskStatus = TaskStatus.OPEN;

        TaskList taskList = taskListRepository.findById(taskListId).orElseThrow(() -> new IllegalArgumentException("Invalid Task List ID provided!")); // Validates that the task list exists

        LocalDateTime now = LocalDateTime.now();

       Task taskForSave = new Task(
                        null, // ID will be generated by the database
                        task.getTitle(),
                        task.getDescription(),
                        task.getDueDate(),
                        task.getStatus(),
                        task.getPriority(),
                        taskList,
                        now,
                        now
                ); // Creates a new task
        return taskRepository.save(taskForSave); // Saves the new task to the repository
    }
}
